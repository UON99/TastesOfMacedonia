@model IEnumerable<WebApplication7.Models.mytable>

@{
    ViewBag.Title = "Index";
}
<link rel="stylesheet" href="/Content/ol.css" type="text/css">
<link rel="stylesheet" href="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/css/ol.css" type="text/css">
<script src="https://cdn.rawgit.com/openlayers/openlayers.github.io/master/en/v5.3.0/build/ol.js"></script>

<style>
    .map {
        height: 400px;
        width: 100%;
    }

    body {
        font-family: Helvetica;
    }


    .popup {
        margin-bottom: 10px;
        background-color: #e15915;
        height: 200px !important;
        z-index: 100000;
        border-radius: 30px;
        width: 400px !important;
    }

    .arrow {
        position: absolute;
        font-size: 50px;
        margin-left: auto;
        margin-right: auto;
        top: 180px;      
        text-align: center;
        width: 100%;
        color: #e15915
    }

    #namediv {

        font-size: 20px;
        
        text-align: center;
    }
</style>

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<div class="row">
    <div id="map" class="map"></div>

    <div class="popup" id="popup">
        <div class="namediv" id="namediv">

        </div>

        <div class="glyphicon glyphicon-triangle-bottom arrow"></div>
    </div>
</div>
<div class="row">
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.lon)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.lat)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.cuisine)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.opening_hours)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.website)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.phone)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.lon)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.lat)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.cuisine)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.opening_hours)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.website)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.phone)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.id })
                    @Html.ActionLink("Reserve", "MakeReservation", new { id = item.id })
                </td>
            </tr>
        }

    </table>

</div>




@section scripts{
    <script src="~/Scripts/ol.js"></script>
    <script type="text/javascript">
        var list = [];

        var marker = {
            lat: 0,
            lon: 0,
            name: "",
            phone: "",
        };
        var attribution = new ol.control.Attribution({
            collapsible: false
        });

        var map = new ol.Map({
            controls: ol.control.defaults({ attribution: false }).extend([attribution]),
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                })
            ],
            target: 'map',
            renderer:'canvas',
            view: new ol.View({
                center: ol.proj.fromLonLat([21.4417, 42.0052]),
                maxZoom: 18,
                zoom: 12
            })
        });

        function add_map_point(lat, lng, name, phone, website, opening) {
            marker.lat = lat;
            marker.lon = lng;
            marker.phone = phone;
            marker.name = name;
            list.push(marker);
            var vectorLayer = new ol.layer.Vector({
                source: new ol.source.Vector({
                    features: [new ol.Feature({
                        name: name,
                        phone: phone,
                        website: website,
                        opening: opening,
                        geometry: new ol.geom.Point(ol.proj.transform([parseFloat(lng), parseFloat(lat)], 'EPSG:4326', 'EPSG:3857')),
                    })]
                }),
                style: new ol.style.Style({
                    image: new ol.style.Icon({
                        anchor: [0.5, 0.5],
                        anchorXUnits: "fraction",
                        anchorYUnits: "fraction",
                        src: "https://upload.wikimedia.org/wikipedia/commons/e/ec/RedDot.svg"
                    })
                })
            });
            map.addLayer(vectorLayer);
        }

        @foreach (var item in Model) {
            <text>add_map_point('@item.lat', '@item.lon','@item.name','@item.phone','@item.website','@item.opening_hours')</text>
        }
        var element = document.getElementById('popup');
        var popup = new ol.Overlay({
            element: element,
            positioning: 'bottom-center',
            stopEvent: false
        });
        map.addOverlay(popup);
        map.on('singleclick', function (evt) {
            var feature = map.forEachFeatureAtPixel(evt.pixel, function (feature, layer) {
                return feature;
            });
            if (feature) {
                var coord = feature.getGeometry().getCoordinates();
                var props = feature.getProperties();
                var info = feature;

                var namediv = document.getElementById('namediv');

                // Offset the popup so it points at the middle of the marker not the tip
                popup.setOffset([0, -22]);
                popup.setPosition(evt.coordinate);
                element.style.display = 'block';
                element.style.fontSize = '10px';

                namediv.innerHTML = feature.get('name');




            } else {
                element.style.display = 'none';
            }
        });


        map.on('singleclick', function (evt) {
            var coord = evt.coordinate;
            var transformed_coordinate = ol.proj.transform(coord, "EPSG:900913", "EPSG:4326");
            console.log(transformed_coordinate);
            var div = document.getElementById("map");
            if (evt == this.vectorLayer) {
                var divtmp = document.createElement("div");
                divtmp.style.width = '100px';
                divtmp.style.height = '100px';
                divtmp.style.background = 'blue';
            }
        });



    </script>

}